// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zoom/v1/zoom.proto

package zoomv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "zoom-api/gen/zoom/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ZoomServiceName is the fully-qualified name of the ZoomService service.
	ZoomServiceName = "zoom.v1.ZoomService"
)

// ZoomServiceClient is a client for the zoom.v1.ZoomService service.
type ZoomServiceClient interface {
	CreateZoom(context.Context, *connect_go.Request[v1.CreateZoomRequest]) (*connect_go.Response[v1.CreateZoomResponse], error)
	GetZoomList(context.Context, *connect_go.Request[v1.GetZoomListRequest]) (*connect_go.ServerStreamForClient[v1.GetZoomListResponse], error)
}

// NewZoomServiceClient constructs a client for the zoom.v1.ZoomService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZoomServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ZoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &zoomServiceClient{
		createZoom: connect_go.NewClient[v1.CreateZoomRequest, v1.CreateZoomResponse](
			httpClient,
			baseURL+"/zoom.v1.ZoomService/CreateZoom",
			opts...,
		),
		getZoomList: connect_go.NewClient[v1.GetZoomListRequest, v1.GetZoomListResponse](
			httpClient,
			baseURL+"/zoom.v1.ZoomService/GetZoomList",
			opts...,
		),
	}
}

// zoomServiceClient implements ZoomServiceClient.
type zoomServiceClient struct {
	createZoom  *connect_go.Client[v1.CreateZoomRequest, v1.CreateZoomResponse]
	getZoomList *connect_go.Client[v1.GetZoomListRequest, v1.GetZoomListResponse]
}

// CreateZoom calls zoom.v1.ZoomService.CreateZoom.
func (c *zoomServiceClient) CreateZoom(ctx context.Context, req *connect_go.Request[v1.CreateZoomRequest]) (*connect_go.Response[v1.CreateZoomResponse], error) {
	return c.createZoom.CallUnary(ctx, req)
}

// GetZoomList calls zoom.v1.ZoomService.GetZoomList.
func (c *zoomServiceClient) GetZoomList(ctx context.Context, req *connect_go.Request[v1.GetZoomListRequest]) (*connect_go.ServerStreamForClient[v1.GetZoomListResponse], error) {
	return c.getZoomList.CallServerStream(ctx, req)
}

// ZoomServiceHandler is an implementation of the zoom.v1.ZoomService service.
type ZoomServiceHandler interface {
	CreateZoom(context.Context, *connect_go.Request[v1.CreateZoomRequest]) (*connect_go.Response[v1.CreateZoomResponse], error)
	GetZoomList(context.Context, *connect_go.Request[v1.GetZoomListRequest], *connect_go.ServerStream[v1.GetZoomListResponse]) error
}

// NewZoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZoomServiceHandler(svc ZoomServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/zoom.v1.ZoomService/CreateZoom", connect_go.NewUnaryHandler(
		"/zoom.v1.ZoomService/CreateZoom",
		svc.CreateZoom,
		opts...,
	))
	mux.Handle("/zoom.v1.ZoomService/GetZoomList", connect_go.NewServerStreamHandler(
		"/zoom.v1.ZoomService/GetZoomList",
		svc.GetZoomList,
		opts...,
	))
	return "/zoom.v1.ZoomService/", mux
}

// UnimplementedZoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZoomServiceHandler struct{}

func (UnimplementedZoomServiceHandler) CreateZoom(context.Context, *connect_go.Request[v1.CreateZoomRequest]) (*connect_go.Response[v1.CreateZoomResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zoom.v1.ZoomService.CreateZoom is not implemented"))
}

func (UnimplementedZoomServiceHandler) GetZoomList(context.Context, *connect_go.Request[v1.GetZoomListRequest], *connect_go.ServerStream[v1.GetZoomListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zoom.v1.ZoomService.GetZoomList is not implemented"))
}
